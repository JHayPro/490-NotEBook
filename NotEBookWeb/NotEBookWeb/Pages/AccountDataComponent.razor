@page "/clientele_sheet"

<h2>Account Details:</h2>
<h4>Name: Marcello Sautto</h4>

<p>
    Filter By City:
    <select @bind="@cityFilter">
        <option value="0"></option>
        @foreach (var client in ClientList)
        {
            <option value="@client.location.City">@client.location.City</option>
        }
    </select>
</p>

<h3>Clients:</h3>
<p>
    <table class="table">
        <thead>
            <tr>
                <th>Client</th>
                <th>Parent</th>
                <th>Grade</th>
                <th></th>
                <th>Subjects</th>
                <th></th>
                <th>Street Address</th>
                <th>City</th>
                <th>State</th>
                <th>Country</th>
                <th>Zip Code</th>
            </tr>
        </thead>
        @if (isEditing)
        {
            foreach (var client in ClientList)
            {
                if (client.location.City == cityFilter || cityFilter == "0")
                {
                    <tr>
                        <td><input type="text" class="form-control" @bind-value="@client.Client" @bind-value:event="oninput" /></td>
                        <td><input type="text" class="form-control" @bind-value="@client.Parent" @bind-value:event="oninput" /></td>
                        <td><input type="text" class="form-control" @bind-value="@client.Grade" @bind-value:event="oninput" /></td>

                        @for (int i = 0; i < client.Subjects.Count; i++)
                        {
                            <td><input type="text" class="form-control" @bind-value="@client.Subjects[i]" @bind-value:event="oninput" /></td>
                        }

                        <td><input type="text" class="form-control" @bind-value="@client.location.StreetAddress" @bind-value:event="oninput" /></td>
                        <td><input type="text" class="form-control" @bind-value="@client.location.City" @bind-value:event="oninput" /></td>
                        <td><input type="text" class="form-control" @bind-value="@client.location.State" @bind-value:event="oninput" /></td>
                        <td><input type="text" class="form-control" @bind-value="@client.location.Country" @bind-value:event="oninput" /></td>
                        <td><input type="text" class="form-control" @bind-value="@client.location.Zipcode" @bind-value:event="oninput" /></td>
                    </tr>
                }
            }
            //Add and remove buttons
            <input type="button" value="Add Entry" class="btn btn-primary" @onclick="() => addClient()" />
            <br />
            <br />
            <input type="button" value="Remove Entry" class="btn btn-primary" @onclick="removeClient" />
            <input type="number" class="input-group-sm" @bind-value="@removeIndex" @bind-value:event="oninput" />
            <br />
            <br />
            <input type="button" class="btn btn-primary" value="Save" @onclick="toggleEditing" />
        }
        else
        {
            foreach (var client in ClientList)
            {
                if (client.location.City == cityFilter || cityFilter == "0")
                {
                <tr>
                    <td>@client.Client</td>
                    <td>@client.Parent</td>
                    <td>@client.Grade.ToString()</td>
                    @for (int i = 0; i < client.Subjects.Count; i++)
                    {
                        <td>@client.Subjects[i]</td>
                    }
                    <td>@client.location.StreetAddress</td>
                    <td>@client.location.City</td>
                    <td>@client.location.State</td>
                    <td>@client.location.Country</td>
                    <td>@client.location.Zipcode</td>

                </tr>
                }
            }
            //Edit Entries
            <input type="button" class="btn btn-primary" value="Edit" @onclick="toggleEditing" />
        }
    </table>

</p>

@code{

    List<ClientInfoModel> ClientList;
    int selectedGroup = 0;
    int selectedLocationId = 0;
    int currID = 0;
    int removeIndex;
    bool isEditing = false;
    string cityFilter = "0";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClientList = new List<ClientInfoModel>() {
        new ClientInfoModel
        {

            Client = "Lenny Kramnik",
            Parent = "Alla Kramnik",
            Grade = 6,
            Subjects = new List<string>(){ "Math", "English", "Coding" },
            isInHome = true,
            location = new Location
            {
                StreetAddress = "5503 Evita Ct",
                City = "Agoura Hills",
                State = "CA",
                Country = "United States",
                Zipcode = "91362"
            }

        } };

    }

    void toggleEditing()
    {
        isEditing = !isEditing;
    }

    void setFilter()
    {

    }

    void addClient() => ClientList.Add(new ClientInfoModel
    {
        Client = "Child",
        Parent = "Parent",
        Grade = 0,
        Subjects = new List<string>() { "Subject1", "Subject2", "Subject3" },
        isInHome = true,
        location = new Location
        {
            StreetAddress = "123 Easy St",
            City = "City",
            State = "State",
            Country = "United States",
            Zipcode = "12345"
        }
    });

    void removeClient()
    {
        if (0 < removeIndex && removeIndex <= ClientList.Count)
        {
            ClientList.RemoveAt(removeIndex - 1);
        }
    }

    #region "View Model"

    class ClientInfoModel
    {
        public string Client { get; set; }
        public string Parent { get; set; }
        public int Grade { get; set; }
        public List<string> Subjects;
        public bool isInHome { get; set; }
        public Location location;
    }

    class Location
    {
        public string StreetAddress { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string Country { get; set; }
        public string Zipcode { get; set; }
    }

    #endregion
}
