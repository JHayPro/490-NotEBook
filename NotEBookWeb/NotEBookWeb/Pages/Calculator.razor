@page "/calculator"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<h1>Calculator</h1>

<label class="ans-display">@answer</label>

<div class="calculator">
    <div class="buttons">
        <span>
            <button @ref=btn7 @onclick="@(() => inputNum(@btn7))">7</button>
            <button @ref=btn8 @onclick="@(() => inputNum(@btn8))">8</button>
            <button @ref=btn9 @onclick="@(() => inputNum(@btn9))">9</button>
            <button @ref="add" @onclick="@(() => inputOperation(@add))">+</button>
        </span>
        <br />
        <span>
            <button @ref=btn4 @onclick="@(() => inputNum(@btn4))">4</button>
            <button @ref=btn5 @onclick="@(() => inputNum(@btn5))">5</button>
            <button @ref=btn6 @onclick="@(() => inputNum(@btn6))">6</button>
            <button @ref="subtract" @onclick="@(() => inputOperation(subtract))">-</button>
        </span>
        <br />
        <span>
            <button @ref=btn1 @onclick="@(() => inputNum(@btn1))">1</button>
            <button @ref=btn2 @onclick="@(() => inputNum(@btn2))">2</button>
            <button @ref=btn3 @onclick="@(() => inputNum(@btn3))">3</button>
            <button @ref="multiply" @onclick="@(() => inputOperation(multiply))">*</button>
        </span>
        <br />
        <span>
            <button @ref=btn0 @onclick="@(() => inputNum(@btn0))">0</button>
            <button @ref=dec @onclick="@(() => inputNum(@dec))">.</button>
            <button @ref="exponent" @onclick="@(() => inputOperation(exponent))">x<sup>y</sup></button>
            <button @ref="divide" @onclick="@(() => inputOperation(divide))">/</button>
        </span>
        <br />
        <span>
            <button @onclick="@(() => clearCalculator())" class="btn btn-outline-primary">Clear</button>
            <button @ref="enter" @onclick="@(() => inputOperation(enter))" class="btn btn-primary">Enter</button>
        </span>
    </div>





</div>

@code {
    private string answer, op;
    private int State;
    private float num1, num2;
    private ElementReference btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn0, dec;
    private ElementReference add, subtract, multiply, divide, exponent, clear, enter;
    private BindElementAttribute d;

    private Dictionary<ElementReference, string> numberButtons;
    private Dictionary<ElementReference, string> operationButtons;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        answer = "0";
        State = 0;

    }

    /*Initialize dictionaries for numbers and operations*/
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);


        numberButtons = new Dictionary<ElementReference, string>() {

            { btn1, "1" },
            { btn2, "2" },
            { btn3, "3" },
            { btn4, "4" },
            { btn5, "5" },
            { btn6, "6" },
            { btn7, "7" },
            { btn8, "8" },
            { btn9, "9" },
            { btn0, "0" },
            { dec, "." }
        };

        operationButtons = new Dictionary<ElementReference, string>() {

                { add, "+"},
                { subtract, "-"},
                { multiply, "*"},
                { divide, "/"},
                {exponent, "^" },
                {enter, "e" }
        };

    }

    /*State manager for number inputs*/
    private async void inputNum(ElementReference element)
    {
        //first input
        if (State == 0)
        {
            answer = numberButtons[element];
            State = 1;
        }

        //add to first input
        else if (State == 1)
        {
            answer += numberButtons[element];
            State = 1;
        }

        //all input strings following first input
        else if (State == 2)
        {
            answer = numberButtons[element];
            State = 3;
        }

        //add to all input strings following first input
        else if (State == 3)
        {
            answer += numberButtons[element];
            State = 3;
        }


        //await JSRuntime.InvokeVoidAsync("setElementText", element);

    }

    /*State manager for operation inputs*/
    private async void inputOperation(ElementReference element)
    {
        //store operand and save current input in num1
        if (State == 1 || op == "e")
        {
            num1 = float.Parse(answer);
            op = operationButtons[element];
            State = 2;
        }

        //perform operations
        if (State == 3)
        {

            num2 = float.Parse(answer);

            if (op == "+")
                answer = Convert.ToString(num1 + num2);

            else if (op == "-")
                answer = Convert.ToString(num1 - num2);

            else if (op == "*")
                answer = Convert.ToString(num1 * num2);

            else if (op == "/")
                answer = Convert.ToString(num1 / num2);

            else if (op == "^")
                answer = Convert.ToString(Math.Pow(num1, num2));


            op = operationButtons[element];
            num1 = float.Parse(answer);
            State = 2;

        }


    }

    private void clearCalculator()
    {
        answer = "0";
        num1 = num2 = 0;
        op = "";
        State = 0;
    }
}



